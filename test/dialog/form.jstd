travi.test.testCase('dialog forms', (function () {
    'use strict';

    var dialogForm = travi.ui.dialog.form,
        events = travi.events,
        dialogEvents = travi.ui.dialog.events,
        dialog = travi.ui.dialog.core,
        validationMapper = travi.ui.form.validationMapper,

        testEvents = travi.test.events,
        any = travi.test.any,

        ajaxCallbacks = {},

        formKey = any.string(),
        formAction = any.string(),
        formMethod = any.string(),
        fieldName = any.string(),
        fieldValue = any.string(),
        $content = $('<section><form method="' + formMethod + '" action="' + formAction + '" travi-form-key="' + formKey + '"><input name="' + fieldName + '" value="' + fieldValue + '"></input></form></section>');

    function launchDialogAndSubmitForm() {
        testEvents.publish(dialogEvents.keys.LOADED, {
            dialog: $content.get(0)
        });
        $('form').submit();
        $.ajax.reset();
    }

    return {
        'test submitting form from dialog content triggers ajax request': function () {
            testEvents.publish(dialogEvents.keys.LOADED, {
                dialog: $content.get(0)
            });

            $('form').submit();

            assert.calledWith($.ajax, sinon.match({
                url: formAction,
                type: formMethod,
                dataType: 'json',
                data: fieldName + '=' + fieldValue
            }));
        },

        'test that form submission defaults to GET if not specified': function () {
            var $formNoMethod = $('<section><form action="' + formAction + '"></form></section>');
            $('body').html($formNoMethod);
            testEvents.publish(dialogEvents.keys.LOADED, {
                dialog: $formNoMethod.get(0)
            });

            $('form').submit();

            assert.calledWith($.ajax, sinon.match({
                type: 'get'
            }));
        },

        'test that dialog is closed after successful form submission and event is published': function () {
            var resource = any.string();
            testEvents.publish(dialogEvents.keys.LOADED, {
                dialog: $content.get(0)
            });
            $('form').submit();

            ajaxCallbacks.success({
                resource: resource,
                foo: 'bar'
            });

            assert.calledOnce(dialog.close);
            assert.calledWith(events.publish, dialogEvents.keys.FORM_SUCCESS, {
                resource: resource,
                key: formKey
            });
        },

        'test that dialog is not closed after validation error and errors are shown on the form': function () {
            var $form = $('form'),
                validationErrors = {
                    foo: 'bar'
                };
            sinon.stub(validationMapper, 'showErrors');
            testEvents.publish(dialogEvents.keys.LOADED, {
                dialog: $content.get(0)
            });
            $form.submit();

            ajaxCallbacks.badRequest({
                responseText: JSON.stringify({
                    form: {
                        errors: validationErrors
                    }
                })
            });

            refute.called(dialog.close);
            assert.calledWith(validationMapper.showErrors, $form.get(0), validationErrors);
        },

        'test that event published after successful addition': function () {
            var addedEntityUrl = any.string(),
                xhr = {
                    getResponseHeader: function (headerName) {
                        if ('Location' === headerName) {
                            return addedEntityUrl;
                        }
                    }
                };
            launchDialogAndSubmitForm();

            ajaxCallbacks.added(null, null, xhr);

            assert.calledWith(events.publish, dialogEvents.keys.FORM_RESULT_CREATED, {
                resource: addedEntityUrl
            });
        },

        setUp: function () {
            $('body').append($content);

            testEvents.stub();
            sinon.stub(events, 'publish');
            sinon.stub($, 'ajax', function (options) {
                if (options.url === formAction) {
                    ajaxCallbacks.success = options.success;
                    ajaxCallbacks.badRequest = options.statusCode[400];
                    ajaxCallbacks.added = options.statusCode[201];
                }
            });
            sinon.stub(dialog, 'close');

            dialogForm.init();
        },

        tearDown: function () {
            travi.test.common.restore([
                $.ajax,
                events.publish,
                dialog.close,
                validationMapper.showErrors
            ]);
            testEvents.restore();
        }
    };
}()));