travi.test.testCase('EntityListTests', (function () {
    'use strict';

    return {
        common: travi.test.common,

        entityList: travi.ui.entityList.core,
        pagination: travi.ui.pagination,
        templates: travi.templates,
        events: travi.events,

        entities: [
            {
                type: 'someType',
                id: 43254,
                title: 'some title',
                details: [
                    'some detail'
                ]
            },
            {
                type: 'someOtherType',
                id: 43254,
                title: 'some other title',
                details: [
                    'some other detail'
                ]
            }
        ],

        setUp: function () {
            var testCase = this;

            $('body').append($.render.entityList({}));

            sinon.stub(this.events, 'subscribe', function (eventName, callback) {
                if (testCase.pagination.events.NEXT_PAGE_REQUESTED === eventName) {
                    testCase.nextPageCallback = callback;
                } else if (testCase.pagination.events.PREV_PAGE_REQUESTED === eventName) {
                    testCase.prevPageCallback = callback;
                }
            });

            this.entityList.init();

            this.$form = $('form');
            this.$confirmation = $('#confirmation');

            sinon.stub(this.templates, 'get', function () {
                var deferred = new $.Deferred();
                deferred.resolve();
                return deferred;
            });
        },

        tearDown: function () {
            travi.test.common.restore([
                jQuery.ajax,
                this.events.publish,
                this.events.subscribe,
                this.templates.get
            ]);

            this.$confirmation.dialog('destroy').remove();
        },

        'test events defined properly': function () {
            assert.equals('page-loaded', this.entityList.constants.get('PAGE_EVENT'));
        },

        'test request for next page loads more announcements': function () {
            var url = 'nextUrl';
            this.stubRequestForAnnouncements();
            sinon.stub(this.events, 'publish');

            this.nextPageCallback({url: url});

            assert(jQuery.ajax.calledOnce);
            this.common.assertAjaxCallMadeWith({
                url: url,
                type: 'get',
                dataType: 'json'
            }, jQuery.ajax.getCall(0).args[0]);

            this.assertLoadedDataAddedToList();
        },

        'test request for prev page loads more announcements': function () {
            var url = 'prevUrl';
            this.stubRequestForAnnouncements();
            sinon.stub(this.events, 'publish');

            this.prevPageCallback({url: url});

            assert(jQuery.ajax.calledOnce);
            this.common.assertAjaxCallMadeWith({
                url: url,
                type: 'get',
                dataType: 'json'
            }, jQuery.ajax.getCall(0).args[0]);

            this.assertLoadedDataAddedToList();
        },

        assertLoadedDataAddedToList: function () {
            assert.equals(this.entities.length, $('.entityList > li').length);
            assert.equals(this.entities.length, $('.entityList > li.entityBlock').length);
            assert.equals(1, $('.entityList > li.someType').length);
            assert.equals(this.entities.length, $('.entityList li.remove-item').length);
            assert.equals(0, $("li.remove-item form").length);

            this.assertEventPublished();
        },

        assertEventPublished: function () {
            var call,
                eventData;

            assert(this.events.publish.calledOnce);
            call = this.events.publish.getCall(0);
            assert.equals(this.entityList.constants.get('PAGE_EVENT'), call.args[0]);

            eventData = call.args[1];
            assert.equals(15, eventData.nextOffset);
            assert.equals(5, eventData.prevOffset);
            assert.equals(10, eventData.offset);
            assert.equals(34, eventData.total);
        },

        stubRequestForAnnouncements: function () {
            var testCase = this;

            sinon.stub(jQuery, 'ajax', function (options) {
                options.success.call(null, {
                    list: {
                        actions: [
                            {
                                text: 'Remove',
                                link: 'someLink'
                            }
                        ],
                        entities: testCase.entities,
                        offset: 10,
                        limit: 5,
                        totalEntities: "34"
                    }
                });
            });
        }
    };
}()));